from inspect import getmembers, isfunction
import figure

def area(*args, type):
    '''
    Функция вычисляет площадь фигуры, указанной в переменной type.
    Сначала формируется словарь всех функции, реализованных в figure.py.
    Если в словаре находится функция, переданная в type, то она
    запускается с переданными параметрами.
    '''
    if len(args) < 1:
        raise ValueError("No arguments to compute area of \'{0}\'".format(type))
    functions = dict(getmembers(figure, isfunction))
    if type in functions.keys():
        return functions[type](*args)
    else:
        raise ValueError("The area for type \'{0}\' is not implemented.".format(type))
    
    '''
    Пункт задания о том, что тип фигуры может быть неизвестен в compile-time я
    понял как необходимость реализовать динамическое определение типа фигуры уже в
    процессе работы модуля, на основе информации, получаемой при вызове функции
    вычисления площади фигуры. Предлагаемой мною решение - универсальная функция с
    переменным числом параметров и обязательным указанием типа фигуры.

    При реализации расширяемости первой мыслью было - применить какую-нибудь конструкцию
    из классов, реализующую полиморфизм функции area(). Но тут я вспомнил один из принципов
    The Zen of Python - Flat is better than nested. В предлагаемом мною решении
    реализация функций вычисления площади для новых фигур выполняется простым добавлением
    в figures.py Например, вы можете просто дописать туда функцию rectangle(), ожидающую
    на входе два пераметра, и все заработает.
    '''
